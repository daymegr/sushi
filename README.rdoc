== SUSHI: Supporting User for SHell script Integration

Process your raw data, without cooking it!

SUSHI is defined as an acronym of Supporting User for SHell script Integration, but some one might say, it is a Super Ultra Special Hyper Incredible system. Anyway, it is a sort of pipeline framework developed in Ruby on Rails in order to share useful pipeline scripts. An instance is now running at FGCZ to process the next genration sequence data for over 1000 projects. There have been some similar frameworks published such as Galaxy, Chipstar, and GeneProof. It is noteworthy that SUSHI is developed in Ruby on Rails, so that updating and installing is in quite simple manner.

== Getting Started

Just access and play around with the demo SUSHI server: http://fgcz-sushi-demo.uzh.ch , and see and feel what SUSHI looks like. Basic usage is described here: http://fgcz-sushi.uzh.ch/usage.html 

== Installation

First of all, let me introduce quickly the main components composing the SUSHI system. There are mainly 3 components:

1. SUSHI server (GUI, Ruby on Rails)
2. SUSHI application (sushi_fabric.gem)
3. Workflow manager (workflow_manager.gem)

SUSHI server is the user interface and some requests are sent to a SUSHI application, and the SUSHI application calls an job submission command of the Worlflow manager that manages and observes each submitted job. All the components will be installed at the same time by bundle command (see the next section) but note that the workflow manager is working as an independent process from SUSHI server (Ruby on Rails) process. Namely, the workflow manager process must run first and then SUSHI server (Ruby on Rails) should start, and both processes must be kept running in background. 

=== Requirements

* Ruby (>= 1.9.3)
* Git
* bundler (RubyGem)
* (Ruby on Rails (>= ver.3.2.9, < 4.0))

Just confirm first to check if the required applications are installed in your system as follows:

  $ ruby -v
  $ git --version
  $ bundle -v

If you get 'Command not found'-like message, you have to install the application before going on to the next step.

Note
* The current version of SUSHI does not work in Ruby on Rails version 4 (but it will be upgraded soon)
* Ruby on Rails will be installed in the following steps by bundler
* Please refer to the following sites for the other application installation
** Ruby https://www.ruby-lang.org/en/
** Git https://git-scm.com/
* To instal 'bundler', just type the following command after you install Ruby:

  $ gem install bundler

=== Download and configration

  $ git clone https://github.com/uzh/sushi.git
  $ cd sushi/
  $ bundle install 
  $ bundle exec rake secret

then, you can see the secret key and paste it in /config/initilizer/devise.rb as follows:

    config.secret_key = 'xxxxx'

xxxxx is your secret key.

  $ bundle exec rake db:migrate RAILS_ENV=production

== Start SUSHI server

1. Start workflow_manager

  $ mkdir workflow_manager
  $ cd workflow_manager/
  $ workflow_manager -m production
  version = X.X.X
  mode = production
  DB = PStore
  Cluster = local_computer
  druby://localhost:12345

Note
* The final line shows the druby address of the workflow manager
* If KyotoCabinet (gem) is installed in your system, KyotoCabinet is automatically selected as a DB system rather than PSotre

2. Start SUSHI server

  $ bundle exec rails server -e production

Note
* SUSHI (Ruby on Rails) server should run in a different folder from the workflow manager folder
* The rails server command starts a WEBRick webserver daemon, which is implemented in Ruby
* SUSHI server uses SQLite3 DBMS as a default
* You can replace the DBMS to MySQL and the webserver application to Apache (+passenger module) if you need
* Please refer to a lot of Rails documents on the web

== Set your first NGS Data and DataSet file

You need to import a DataSet file (.tsv) to SUSHI database.

All Sushi applications take a DataSet, which is meta-information set of actual data, as an input, and sushi applications produce another DataSet as an output. The DataSet is identified as a .tsv (Tab-Separated-Value) text file, and it includes all input/output actual data file location (path). All DataSet file (.tsv) should be located in your project directory, the default project path becomes $RAILS_ROOT/public/gstore/projects/p1001, which directory will be automatically generated at the first running of the SUSHI server. 

Sample DataSet
* http://localhost:3000/ventricles_100k.tgz

You can download it from your SUSHI server, or you can copy it from $RAIL_ROOT/public/ventricles_100k.tgz. After you decompress the archive file, move the folder in the project directory, $RAILS_ROOT/public/gstore/projects/p1001/

then you can find it from the SUSHI server by clicking 'gStore' of the main menu. To click the "+"(plus) button next to 'dataset.tsv' file under the ventricles_100k directory from the gStore view imports it as a SUSHI DataSet to SUSHI database, and a new DataSet, ventricles_100k, will show up in 'DataSet' view.
 
== How to run a SUSHI application

The procedure is as follows:

1. Select a DataSet
2. Select a SUSHI applicaiton
3. Set parameters
4. Click 'submit' button

Note
* Initially, only 'WordCountApp' is available, though other SUSHI application buttons appear in DataSet view. 
* After installing ezRun package and installing corresponding applications in your system, the other SUSHI applications will work. See the following steps.

== Install ezRun package

Please refer to https://github.com/uzh/ezRun

And set the following constants in lib/global_variables.rb approplicately:

  EZ_GLOBAL_VARIABLES = '/usr/local/ngseq/opt/EZ_GLOBAL_VARIABLES.txt'
  R_COMMAND = '/usr/local/ngseq/stow/R-3.2.0/bin/R'

== Install iGenome reference

TODO
* GENOME_REF_DIR = '/srv/GT/reference'

== Advanced SUSHI configuration

=== How to add a new cluster

TODO

=== How to make/add a new SUSHI application

TODO

== How to generate SUSHI applications workflow pipeline

TODO

=== How to migrate SQLite3 to MySQL

TODO

=== How to migrate WEBRick to Apache + passenger

TODO

=== Workflow manager configuration

TODO

=== SUSHI configuration

TODO

=== SUSHI framework background

TODO




